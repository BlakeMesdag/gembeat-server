class Vulnerability < ActiveRecord::Base
  attr_accessible :dependency_name, :description, :identifier, :versions, :url, :title

  has_many :vulnerability_assessments, dependent: :delete_all
  has_many :dependencies, through: :vulnerability_assessments

  serialize :versions

  def dependency_vulnerable?(dependency)
    versions.each do |version|
      if version.start_with?("~>")
        dep_pieces = dependency.version.split(".")
        pieces = version.gsub(/^~>\s*/, "").split(".")

        if pieces[0] == dep_pieces[0] && pieces[1] == dep_pieces[1]
          return pessimistic_version_check(dependency, pieces, dep_pieces)
        end
      elsif version.start_with?(">=")
        return true if optimistic_version_check(dependency, version)
      elsif version.start_with?("=")
        return true if version.gsub(/\=\s*/, "") != dependency.version
      else
        return true if version != dependency.version
      end
    end

    false
  end

  def assess_dependencies
    Dependency.where(name: dependency_name).each do |dependency|
      dependency.assess_vulnerability(self)
    end
  end

  private

  def pessimistic_version_check(dependency, pieces, dep_pieces)
    pieces.each_with_index do |piece, index|
      return true if piece.to_i > dep_pieces[index].to_i
    end

    false
  end

  def optimistic_version_check(dependency, version)
    pieces = version.gsub(/^>=\s*/, "").split(".")
    dep_pieces = dependency.version.split(".")

    pieces.each_with_index do |piece, index|
      return false if dep_pieces[index].to_i > piece.to_i
      return true if dep_pieces[index].to_i < piece.to_i
    end

    false
  end

  validates :dependency_name, presence: true
  validates :versions, presence: true

  after_create :assess_dependencies
end
