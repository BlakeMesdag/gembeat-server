require 'test_helper'

class VulnerabilityTest < ActiveSupport::TestCase
  def setup
    @vulnerability = vulnerabilities(:rails)
    @vulnerability_params = {
      dependency_name: "json", 
      identifier: "CVE-1234-567",
      url: "http://someurl.com/CVE-1234-567",
      description: "A vulnerability in json",
      versions: ["1.7.7", "1.6.5"]
    }
  end

  test "vulnerability requires a dependency_name" do
    @vulnerability_params.delete(:dependency_name)

    vulnerability = Vulnerability.new(@vulnerability_params)

    assert_equal false, vulnerability.valid?
    assert vulnerability.errors[:dependency_name].present?
  end

  test "vulnerability requires a set of minimum versions" do
    @vulnerability_params.delete(:versions)

    vulnerability = Vulnerability.new(@vulnerability_params)

    assert_equal false, vulnerability.valid?
    assert vulnerability.errors[:versions].present?
  end

  test "dependency_vulnerable? returns true if a dependency is vulnerable" do
    @vulnerability.versions = ["3.2.13", "3.1.10"]

    dependency = dependencies(:gembeat_dependency)

    assert_equal true, @vulnerability.dependency_vulnerable?(dependency)
  end

  test "dependency_vulnerable? returns false if a minor dependency version isn't listed in the vulnerability" do
    @vulnerability.versions = ["3.0.17"]

    dependency = dependencies(:gembeat_dependency)

    assert_equal false, @vulnerability.dependency_vulnerable?(dependency)
  end

  test "dependency_vulnerable? returns false if a dependency version is equal to a version listed in the vulnerability" do
    @vulnerability.versions = ["3.2.12"]

    dependency = dependencies(:gembeat_dependency)

    assert_equal false, @vulnerability.dependency_vulnerable?(dependency)
  end

  test "vulnerability assesses all current dependencies on create" do
    Vulnerability.any_instance.expects(:assess_dependencies).at_least_once

    vulnerability = Vulnerability.new(@vulnerability_params)
    vulnerability.save!
  end
end
